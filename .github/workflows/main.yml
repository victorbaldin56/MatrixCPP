# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        config:
          - { build_type: Debug, asan_preset_flag: "--preset gcc_debug_san", testing: true, cmake_toolchain_file: "conan_toolchain.cmake" }
          - { build_type: Release, asan_preset_flag: "", testing: true, cmake_toolchain_file: "conan_toolchain.cmake" }
          - { build_type: Release, asan_preset_flag: "", testing: false, cmake_toolchain_file: "" }

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Installing packages
      run: sudo apt-get -y update &&
           sudo apt-get install python3 pip g++-12

    - name: Creating and setting venv
      if: ${{ matrix.config.testing }}
      run: python3 -m venv .venv;
           source .venv/bin/activate;
           echo PATH=$PATH >> $GITHUB_ENV;
           pip install -r requirements.txt;
           conan profile detect --force;
           conan install . -s build_type=${{ matrix.config.build_type }} --output-folder=build --build=missing

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -S ${{ github.workspace }}
        ${{ matrix.config.asan_preset_flag }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx_compiler }}
        -DCMAKE_cmake_toolchain_file=${{ matrix.config.cmake_toolchain_file }}
        -DBUILD_TESTING=${{ matrix.config.testing }}

    - name: Build
      run:
        cmake --build build -j

    - name: Test
      if: ${{ matrix.config.testing }}
      run: ctest --output-on-failure --test-dir build
